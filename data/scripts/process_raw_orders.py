import random
import pandas as pd
import numpy as np
import datetime

# Read in marketing tables
print('reading campaigns, channels...')
campaigns = pd.read_csv('../source/campaigns.csv')
campaigns['start_dt'] = pd.to_datetime(campaigns['start_date'])
campaigns['end_dt'] = pd.to_datetime(campaigns['end_date'])
channels = pd.read_csv('../source/campaign_channels.csv')

# Given a date, find a campaign running on that date, and return the tracking
# code for one of that campaign's channels at random
def find_tracking_code(order_date):
    # campaigns that are effective around our order_date
    potential_campaigns = campaigns[(order_date >= campaigns['start_dt']) \
                                & (order_date <= campaigns['end_dt'])]
    pcl = len(potential_campaigns) # potential_campaigns length (could be zero)

    # select one of found campaigns at random, or none
    # This part is a little tricky
    #   if pcl is 0, then rn will be 0 and we return blank
    #   if pcl is 2, and rn is 2 then we return blank
    #     otherwise rn is an index into potential_campaigns
    rn = random.randint(0,pcl) #
    if rn < pcl :
        cid = potential_campaigns.iloc[rn]['campaign_id'] # Chosen Campaign ID
    else:
        return ''
    # Find a channel
    pch = channels[channels['campaign_id'] == cid] # potential channels
    pchl = len(pch) # pot channels len
    sch = pd.Series() # selected channel
    if pchl == 0:
        return ''
    # retrive the selected channel
    return pch.iloc[random.randint(0,pchl-1)]['tracking_code']

# Read in the orders as generated by Mockaroo
# curl "https://api.mockaroo.com/api/39ba8c90?count=1000&key=66099da0" > "orders_raw.csv"
orders = pd.read_csv('../temp/orders_raw.csv')
print('order rows: ' + str(len(orders)))



# Consolidates (discards) random orders so that each remaining order
# has one or more order lines. Creates the order_line_id key.
new_orders = orders.copy()
new_orders.insert(loc=6, column='order_line_id', value=orders['order_id']+"-1")
new_orders.insert(loc=5, column='tracking_code', value="")


n = len(orders)
line = 1
order_count = 0
for i, row in orders.iterrows():
    if (i % 1000) == 0:
        print('.', end='', flush=True)
    if (i + 1) == n:
        break

    # Add the tracking code if one is found
    tc = find_tracking_code(row['order_date'])

    # decide whether to consolidate the next row
    r = random.randint(0,1)

    if  r == 0: # no, reset the order-line #
        line = 1

    if line == 1: # if on the first order-line, 'lock' the row and tc
        order_count = order_count + 1
        locked_row = row.copy()
        locked_tc = tc

    if r == 1: # yes, overwrite the next row
        if line == 1:
            new_orders.loc[i, 'tracking_code'] = locked_tc
        line = line + 1
        new_orders.iloc[i+1,0:7] = locked_row[0:7]
        new_orders.loc[i+1, 'order_line_id'] = locked_row['order_id']+"-"+str(line)
        new_orders.loc[i+1, 'tracking_code'] = locked_tc


# Output the new orders file
print ('\nconsolidated orders: ', order_count)
newfilename='../source/orders.csv_1_' + str(int(datetime.datetime.now().timestamp()))
new_orders.to_csv(newfilename, encoding='utf-8', index=False)

quit()
